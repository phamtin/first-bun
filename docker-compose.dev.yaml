services:
    nginx:
        image: nginx:1.28-alpine
        container_name: "nginx"
        volumes:
            - ./apps/api/deploy/local/nginx.conf:/etc/nginx/nginx.conf
            - ./apps/api/deploy/local/logs:/var/log/nginx
        ports:
            - "8080:8080"
            - "443:443" # HTTPS
        restart: unless-stopped
        network_mode: host
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080/ping"]
            interval: 30s
            timeout: 10s
            retries: 3

    nats:
        image: nats:latest
        container_name: "nats"
        command: ["-js", "-m", "8222"]
        ports:
            - "4222:4222"
            - "8222:8222"
        restart: unless-stopped
        network_mode: host
        healthcheck:
            test: ["CMD", "nats", "server", "check", "jetstream"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 5s

    redis-stack:
        image: redis:8.0.2
        container_name: "redis-stack"
        volumes:
            - ./data/redis:/data
        restart: always
        ports:
            - "6379:6379"
        network_mode: host
        healthcheck:
            test: ["CMD", "redis-cli", "-h", "localhost", "ping"]
            interval: 10s
            retries: 5
            start_period: 5s
            timeout: 5s
        deploy:
            resources:
                limits:
                    cpus: '0.40'
                    memory: 500M

    api:
        build:
            context: .
            dockerfile: apps/api/Dockerfile.dev.yml
        env_file:
            - .env.local
        ports:
            - "8000:8000"
        restart: always
        depends_on:
            redis-stack:
                condition: service_healthy
        network_mode: host
        develop:
            watch:
                - action: rebuild
                  path: ./apps/
                  ignore:
                    - node_modules/
                - action: sync
                  path: ./apps/
                  target: /app/apps/
                  ignore:
                    - node_modules/
                
    worker:
        build:
            context: .
            dockerfile: apps/workers/Dockerfile.dev.yml
        env_file:
            - .env.local
        restart: always
        network_mode: host
        depends_on:
            redis-stack:
                condition: service_healthy
        